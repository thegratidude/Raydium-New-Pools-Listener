import asyncio
import json
import signal
import sys
from datetime import datetime
import socketio
from colorama import init, Fore, Style
import aiohttp

# Constants
SERVER_URL = 'http://localhost:5001'
RECONNECT_DELAY = 5  # seconds
NEW_POOL_COUNT = 0
MESSAGE_LOG_FILE = 'logs/websocket_messages.log'

# Initialize colorama for cross-platform colored terminal output
init()

# Create a Socket.IO client instance with explicit transport options
sio = socketio.AsyncClient(
    reconnection=True,
    reconnection_attempts=0,  # infinite reconnection attempts
    reconnection_delay=RECONNECT_DELAY,
    reconnection_delay_max=30,  # max delay between reconnection attempts
    randomization_factor=0.5,  # add some randomization to reconnection delays
    logger=False,  # disable client-side logging to quiet console
    engineio_logger=False,  # disable engine.io logging to quiet console
)

# Global flag for graceful shutdown
running = True
shutdown_requested = False

# Track health messages to only show once per minute
last_health_log_time = 0
health_message_count = 0

# Paper trading portfolio tracking
last_portfolio_check = 0
portfolio_check_interval = 30  # seconds

def signal_handler(sig, frame):
    """Handle graceful shutdown on SIGINT (Ctrl+C)"""
    global running, shutdown_requested
    
    if shutdown_requested:
        print(f"\n{Fore.RED}Force shutting down...{Style.RESET_ALL}")
        sys.exit(1)
    
    shutdown_requested = True
    print(f"\n{Fore.YELLOW}üõë Shutdown requested (Ctrl+C)...{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}‚è≥ Disconnecting from server and cleaning up...{Style.RESET_ALL}")
    
    running = False
    
    # Schedule the actual shutdown after a brief delay to allow cleanup
    def force_shutdown():
        print(f"\n{Fore.RED}Force shutdown after timeout{Style.RESET_ALL}")
        sys.exit(1)
    
    # Set a timeout for graceful shutdown
    import threading
    timer = threading.Timer(5.0, force_shutdown)
    timer.start()
    
    # Try to disconnect gracefully
    try:
        loop = asyncio.get_event_loop()
        if loop.is_running():
            # Schedule the disconnect in the event loop
            asyncio.create_task(graceful_shutdown())
        else:
            # If no event loop is running, run the shutdown directly
            asyncio.run(graceful_shutdown())
    except Exception as e:
        print(f"{Fore.RED}Error during graceful shutdown: {e}{Style.RESET_ALL}")
        timer.cancel()
        sys.exit(1)

async def graceful_shutdown():
    """Perform graceful shutdown operations"""
    global sio
    
    try:
        if sio.connected:
            print(f"{Fore.CYAN}üîå Disconnecting from Socket.IO server...{Style.RESET_ALL}")
            await sio.disconnect()
            print(f"{Fore.GREEN}‚úÖ Successfully disconnected from server{Style.RESET_ALL}")
        else:
            print(f"{Fore.YELLOW}‚ö†Ô∏è  Already disconnected from server{Style.RESET_ALL}")
    except Exception as e:
        print(f"{Fore.RED}‚ùå Error disconnecting: {e}{Style.RESET_ALL}")
    
    print(f"{Fore.GREEN}‚úÖ Shutdown complete{Style.RESET_ALL}")
    sys.exit(0)

# Register signal handlers
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

def log_message(message_type: str, data: dict):
    """Log message to both console and file"""
    if not running:
        return  # Don't log during shutdown
        
    timestamp = datetime.now().isoformat()
    log_entry = f"[{timestamp}] {message_type}: {json.dumps(data, indent=2)}\n"
    
    # Log to file
    try:
        with open(MESSAGE_LOG_FILE, 'a') as f:
            f.write(log_entry)
    except Exception as e:
        print(f"{Fore.RED}Error writing to log file: {e}{Style.RESET_ALL}")

@sio.event
async def connect():
    """Handle successful connection to the server"""
    if not running:
        return
        
    log_message("CONNECT", {
        "status": "connected",
        "server": SERVER_URL,
        "client_id": sio.sid,
        "transport": sio.transport()
    })
    print(f"{Fore.GREEN}‚úÖ Connected to Socket.IO server at {SERVER_URL}{Style.RESET_ALL}")
    print(f"{Fore.GREEN}‚úÖ Client ID: {sio.sid}{Style.RESET_ALL}")
    print(f"{Fore.GREEN}‚úÖ Transport: {sio.transport()}{Style.RESET_ALL}")
    print(f"{Fore.CYAN}üéß Listening for events: pool_status_6, pool_ready, health{Style.RESET_ALL}")
    print(f"{Fore.CYAN}üí∞ Paper Trading Events: paper_trading_update, early_position_entered, early_position_exited{Style.RESET_ALL}")
    print(f"{Fore.CYAN}üéØ Arbitrage Events: arbitrage_opportunity{Style.RESET_ALL}")
    print(f"{Fore.CYAN}‚è∞ Health updates will be shown once per minute...{Style.RESET_ALL}")
    print(f"{Fore.CYAN}üíº Portfolio status will be checked every 30 seconds...{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}üí° Press Ctrl+C to stop the listener{Style.RESET_ALL}")

@sio.event
async def disconnect():
    """Handle disconnection from the server"""
    if not running:
        return
        
    log_message("DISCONNECT", {"status": "disconnected", "server": SERVER_URL})
    print(f"{Fore.YELLOW}‚ö†Ô∏è  Disconnected from server{Style.RESET_ALL}")

@sio.on('pool_status_6')
async def on_pool_status_6(data):
    """Handle pool status 6 events (NEW Status 6 pools detected)"""
    if not running:
        return
        
    global NEW_POOL_COUNT
    NEW_POOL_COUNT += 1
    
    # Safely prepare data for logging by converting any problematic fields
    safe_data = {}
    for key, value in data.items():
        if isinstance(value, bytes):
            safe_data[key] = value.hex() if len(value) <= 32 else f"{value[:16].hex()}..."
        elif isinstance(value, dict):
            safe_data[key] = {}
            for k, v in value.items():
                if isinstance(v, bytes):
                    safe_data[key][k] = v.hex() if len(v) <= 32 else f"{v[:16].hex()}..."
                else:
                    safe_data[key][k] = v
        else:
            safe_data[key] = value
    
    # Log the safe message
    log_message("POOL_STATUS_6", {
        **safe_data,
        "client_id": sio.sid,
        "received_at": datetime.now().isoformat()
    })
    
    try:
        timestamp = datetime.fromtimestamp(data.get('timestamp', 0) / 1000)
        formatted_time = timestamp.strftime('%Y-%m-%d %H:%M:%S')
        
        print(f"\n{Fore.GREEN}[{formatted_time}] üöÄ NEW STATUS 6 POOL DETECTED:{Style.RESET_ALL}")
        print(f"{Fore.GREEN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê{Style.RESET_ALL}")
        print(f"{Fore.GREEN}Pool ID: {data.get('pool_id', 'N/A')}{Style.RESET_ALL}")
        
        # Token information
        data_obj = data.get('data', {})
        token_a = data_obj.get('token_a', {})
        token_b = data_obj.get('token_b', {})
        print(f"{Fore.GREEN}Token A: {token_a.get('symbol', 'N/A')} ({token_a.get('mint', 'N/A')[:8]}...){Style.RESET_ALL}")
        print(f"{Fore.GREEN}Token B: {token_b.get('symbol', 'N/A')} ({token_b.get('mint', 'N/A')[:8]}...){Style.RESET_ALL}")
        
        # Pool timing
        pool_open_time = data_obj.get('pool_open_time', 0)
        if pool_open_time > 0:
            pool_open_date = datetime.fromtimestamp(pool_open_time)
            print(f"{Fore.GREEN}Pool Opens: {pool_open_date.strftime('%Y-%m-%d %H:%M:%S')}{Style.RESET_ALL}")
            
            # Calculate pool age
            current_time = datetime.now()
            pool_age = (current_time - pool_open_date).total_seconds()
            print(f"{Fore.GREEN}Pool Age: {pool_age:.1f}s{Style.RESET_ALL}")
        
        # Vault addresses for trading
        print(f"{Fore.CYAN}Base Vault: {data_obj.get('base_vault', 'N/A')[:8]}...{Style.RESET_ALL}")
        print(f"{Fore.CYAN}Quote Vault: {data_obj.get('quote_vault', 'N/A')[:8]}...{Style.RESET_ALL}")
        
        # Market information
        print(f"{Fore.CYAN}LP Mint: {data_obj.get('lp_mint', 'N/A')[:8]}...{Style.RESET_ALL}")
        print(f"{Fore.CYAN}Market ID: {data_obj.get('market_id', 'N/A')[:8]}...{Style.RESET_ALL}")
        print(f"{Fore.CYAN}AMM Open Orders: {data_obj.get('amm_open_orders', 'N/A')[:8]}...{Style.RESET_ALL}")
        
        # Fee structure
        trade_fee_num = data_obj.get('trade_fee_numerator', 0)
        trade_fee_den = data_obj.get('trade_fee_denominator', 10000)
        swap_fee_num = data_obj.get('swap_fee_numerator', 0)
        swap_fee_den = data_obj.get('swap_fee_denominator', 10000)
        
        trade_fee_pct = (trade_fee_num / trade_fee_den * 100) if trade_fee_den > 0 else 0
        swap_fee_pct = (swap_fee_num / swap_fee_den * 100) if swap_fee_den > 0 else 0
        
        print(f"{Fore.YELLOW}Trade Fee: {trade_fee_pct:.3f}% ({trade_fee_num}/{trade_fee_den}){Style.RESET_ALL}")
        print(f"{Fore.YELLOW}Swap Fee: {swap_fee_pct:.3f}% ({swap_fee_num}/{swap_fee_den}){Style.RESET_ALL}")
        
        # Trading parameters
        min_size = data_obj.get('min_size', 0)
        max_price_mult = data_obj.get('max_price_multiplier', 0)
        min_price_mult = data_obj.get('min_price_multiplier', 0)
        
        print(f"{Fore.YELLOW}Min Size: {min_size}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}Price Range: {min_price_mult:.2f}x - {max_price_mult:.2f}x{Style.RESET_ALL}")
        
        # Pool configuration
        base_decimals = data_obj.get('base_decimals', 9)
        quote_decimals = data_obj.get('quote_decimals', 6)
        depth = data_obj.get('depth', 0)
        
        print(f"{Fore.YELLOW}Decimals: {base_decimals}/{quote_decimals}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}Order Book Depth: {depth}{Style.RESET_ALL}")
        
        # Detection metadata
        detected_at = data_obj.get('detected_at', 0)
        pool_age_seconds = data_obj.get('pool_age_seconds', 0)
        
        print(f"{Fore.MAGENTA}Detected At: {datetime.fromtimestamp(detected_at/1000).strftime('%H:%M:%S.%f')[:-3]}{Style.RESET_ALL}")
        print(f"{Fore.MAGENTA}Detection Delay: {pool_age_seconds}s{Style.RESET_ALL}")
        
        print(f"{Fore.GREEN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê{Style.RESET_ALL}")
        
        # Send acknowledgment back to server
        await sio.emit('pool_status_6_received', {
            'pool_id': data.get('pool_id'),
            'received_at': datetime.now().isoformat(),
            'client_id': sio.sid
        })
        
    except Exception as e:
        print(f"{Fore.RED}Error processing pool_status_6 message: {str(e)}{Style.RESET_ALL}")
        log_message("ERROR", {
            "type": "pool_status_6_processing_error",
            "error": str(e),
            "data": safe_data,
            "client_id": sio.sid
        })

@sio.on('pool_ready')
async def on_pool_ready(data):
    """Handle pool ready events (pools ready for trading)"""
    if not running:
        return
        
    log_message("POOL_READY", {
        **data,
        "client_id": sio.sid,
        "received_at": datetime.now().isoformat()
    })
    
    try:
        timestamp = datetime.fromtimestamp(data.get('timestamp', 0) / 1000)
        formatted_time = timestamp.strftime('%Y-%m-%d %H:%M:%S')
        
        print(f"\n{Fore.CYAN}[{formatted_time}] üéØ POOL READY FOR TRADING:{Style.RESET_ALL}")
        print(f"{Fore.CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê{Style.RESET_ALL}")
        print(f"{Fore.CYAN}Pool ID: {data.get('pool_id', 'N/A')}{Style.RESET_ALL}")
        
        # Trading information
        data_obj = data.get('data', {})
        print(f"{Fore.CYAN}Base Token: {data_obj.get('base_token', 'N/A')}{Style.RESET_ALL}")
        print(f"{Fore.CYAN}Quote Token: {data_obj.get('quote_token', 'N/A')}{Style.RESET_ALL}")
        
        # Pool timing
        pool_open_time = data_obj.get('pool_open_time', 0)
        if pool_open_time > 0:
            pool_open_date = datetime.fromtimestamp(pool_open_time)
            print(f"{Fore.CYAN}Pool Opened: {pool_open_date.strftime('%Y-%m-%d %H:%M:%S')}{Style.RESET_ALL}")
        
        print(f"{Fore.CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê{Style.RESET_ALL}")
        
    except Exception as e:
        print(f"{Fore.RED}Error processing pool ready message: {str(e)}{Style.RESET_ALL}")

@sio.on('health')
async def on_health(data):
    """Handle health check events - only show once per minute"""
    if not running:
        return
        
    global last_health_log_time, health_message_count
    health_message_count += 1
    
    # Only log health messages once per minute
    current_time = datetime.now()
    if last_health_log_time == 0 or (current_time - last_health_log_time).seconds >= 60:
        uptime = data.get('uptime', 0)
        hours = int(uptime) // 3600
        minutes = (int(uptime) % 3600) // 60
        
        print(f"\n{Fore.GREEN}üè• HEALTH CHECK - {current_time.strftime('%H:%M:%S')}{Style.RESET_ALL}")
        print(f"{Fore.GREEN}   ‚è±Ô∏è  Server uptime: {hours}h {minutes}m{Style.RESET_ALL}")
        print(f"{Fore.GREEN}   üíì Health messages received: {health_message_count}{Style.RESET_ALL}")
        print(f"{Fore.GREEN}   üÜï New pools detected: {NEW_POOL_COUNT}{Style.RESET_ALL}")
        
        # Reset counters
        last_health_log_time = current_time
        health_message_count = 0

async def connect_to_server():
    """Connect to the Socket.IO server with retry logic"""
    global running
    
    while running:
        try:
            # Check if already connected
            if sio.connected:
                print(f"{Fore.YELLOW}Already connected to server, maintaining connection...{Style.RESET_ALL}")
                # Keep the connection alive and check portfolio periodically
                while running and sio.connected:
                    await asyncio.sleep(1)
                    
                    # Check paper trading portfolio every 30 seconds
                    current_time = datetime.now().timestamp()
                    if current_time - last_portfolio_check >= portfolio_check_interval:
                        await check_paper_portfolio()
                        
                if not running:
                    break
                continue
            
            print(f"{Fore.CYAN}Connecting to Socket.IO server at {SERVER_URL}...{Style.RESET_ALL}")
            await sio.connect(SERVER_URL)
            print(f"{Fore.GREEN}Connection established. Client ID: {sio.sid}{Style.RESET_ALL}")
            
            # Keep the connection alive and check portfolio periodically
            while running and sio.connected:
                await asyncio.sleep(1)
                
                # Check paper trading portfolio every 30 seconds
                current_time = datetime.now().timestamp()
                if current_time - last_portfolio_check >= portfolio_check_interval:
                    await check_paper_portfolio()
                
            if not running:
                break
                
        except Exception as e:
            if not running:
                break
            print(f"{Fore.RED}Connection failed: {e}{Style.RESET_ALL}")
            print(f"{Fore.YELLOW}Retrying in {RECONNECT_DELAY} seconds...{Style.RESET_ALL}")
            await asyncio.sleep(RECONNECT_DELAY)

async def main():
    """Main function to run the listener"""
    global running
    
    print(f"{Fore.CYAN}Starting Raydium Pool Listener...{Style.RESET_ALL}")
    print(f"{Fore.CYAN}Connecting to Socket.IO server at {SERVER_URL}...{Style.RESET_ALL}")
    
    try:
        await connect_to_server()
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}Keyboard interrupt received{Style.RESET_ALL}")
    except Exception as e:
        print(f"{Fore.RED}Unexpected error: {e}{Style.RESET_ALL}")
    finally:
        if sio.connected:
            await sio.disconnect()
        print(f"{Fore.GREEN}Listener stopped{Style.RESET_ALL}")

async def check_paper_portfolio():
    """Check paper trading portfolio status via HTTP API"""
    global last_portfolio_check
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f'{SERVER_URL}/trading/paper-portfolio') as response:
                if response.status == 200:
                    data = await response.json()
                    portfolio = data.get('data', {})
                    
                    # Only show if there's activity or every 5 minutes
                    current_time = datetime.now()
                    should_show = (
                        portfolio.get('totalTrades', 0) > 0 or
                        portfolio.get('activePositions', 0) > 0 or
                        (current_time.timestamp() - last_portfolio_check) >= 300  # 5 minutes
                    )
                    
                    if should_show:
                        print(f"\n{Fore.MAGENTA}üí∞ PAPER TRADING PORTFOLIO STATUS:{Style.RESET_ALL}")
                        print(f"{Fore.MAGENTA}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê{Style.RESET_ALL}")
                        print(f"{Fore.MAGENTA}Balance: {portfolio.get('balance', 0):.4f} SOL{Style.RESET_ALL}")
                        print(f"{Fore.MAGENTA}Total PnL: {portfolio.get('totalPnL', 0):.4f} SOL{Style.RESET_ALL}")
                        print(f"{Fore.MAGENTA}Total Trades: {portfolio.get('totalTrades', 0)}{Style.RESET_ALL}")
                        print(f"{Fore.MAGENTA}Success Rate: {portfolio.get('successRate', 0):.1f}%{Style.RESET_ALL}")
                        print(f"{Fore.MAGENTA}Active Positions: {portfolio.get('activePositions', 0)}/{portfolio.get('maxPositions', 3)}{Style.RESET_ALL}")
                        
                        # Show recent trades if any
                        recent_trades = portfolio.get('recentTrades', [])
                        if recent_trades:
                            print(f"{Fore.MAGENTA}Recent Trades:{Style.RESET_ALL}")
                            for trade in recent_trades[-3:]:  # Last 3 trades
                                trade_type = trade.get('type', 'unknown')
                                price = trade.get('price', 0)
                                amount = trade.get('amount', 0)
                                timestamp = datetime.fromtimestamp(trade.get('timestamp', 0) / 1000)
                                print(f"{Fore.MAGENTA}  {trade_type.upper()}: {amount:.4f} SOL @ {price:.8f} ({timestamp.strftime('%H:%M:%S')}){Style.RESET_ALL}")
                        
                        print(f"{Fore.MAGENTA}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê{Style.RESET_ALL}")
                        last_portfolio_check = current_time.timestamp()
                        
    except Exception as e:
        print(f"{Fore.RED}Error checking paper portfolio: {e}{Style.RESET_ALL}")

@sio.on('paper_trading_update')
async def on_paper_trading_update(data):
    """Handle paper trading portfolio updates"""
    if not running:
        return
        
    log_message("PAPER_TRADING_UPDATE", {
        **data,
        "client_id": sio.sid,
        "received_at": datetime.now().isoformat()
    })
    
    try:
        print(f"\n{Fore.MAGENTA}üí∞ PAPER TRADING UPDATE:{Style.RESET_ALL}")
        print(f"{Fore.MAGENTA}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê{Style.RESET_ALL}")
        
        # Trade information
        trade_type = data.get('type', 'unknown')
        pool_id = data.get('pool_id', 'N/A')
        amount = data.get('amount', 0)
        price = data.get('price', 0)
        pnl = data.get('pnl', 0)
        
        print(f"{Fore.MAGENTA}Type: {trade_type.upper()}{Style.RESET_ALL}")
        print(f"{Fore.MAGENTA}Pool: {pool_id[:8]}...{Style.RESET_ALL}")
        print(f"{Fore.MAGENTA}Amount: {amount:.4f} SOL{Style.RESET_ALL}")
        print(f"{Fore.MAGENTA}Price: {price:.8f} SOL{Style.RESET_ALL}")
        
        if pnl != 0:
            pnl_color = Fore.GREEN if pnl > 0 else Fore.RED
            print(f"{pnl_color}PnL: {pnl:+.4f} SOL{Style.RESET_ALL}")
        
        # Portfolio balance
        balance = data.get('balance', 0)
        print(f"{Fore.MAGENTA}Portfolio Balance: {balance:.4f} SOL{Style.RESET_ALL}")
        
        print(f"{Fore.MAGENTA}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê{Style.RESET_ALL}")
        
    except Exception as e:
        print(f"{Fore.RED}Error processing paper trading update: {str(e)}{Style.RESET_ALL}")

@sio.on('early_position_entered')
async def on_early_position_entered(data):
    """Handle early position entry events"""
    if not running:
        return
        
    log_message("EARLY_POSITION_ENTERED", {
        **data,
        "client_id": sio.sid,
        "received_at": datetime.now().isoformat()
    })
    
    try:
        timestamp = datetime.fromtimestamp(data.get('timestamp', 0) / 1000)
        formatted_time = timestamp.strftime('%Y-%m-%d %H:%M:%S')
        
        print(f"\n{Fore.GREEN}[{formatted_time}] üöÄ EARLY POSITION ENTERED:{Style.RESET_ALL}")
        print(f"{Fore.GREEN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê{Style.RESET_ALL}")
        print(f"{Fore.GREEN}Position ID: {data.get('position_id', 'N/A')}{Style.RESET_ALL}")
        print(f"{Fore.GREEN}Pool ID: {data.get('pool_id', 'N/A')}{Style.RESET_ALL}")
        print(f"{Fore.GREEN}Entry Price: {data.get('entry_price', 0):.8f} SOL{Style.RESET_ALL}")
        print(f"{Fore.GREEN}Amount: {data.get('amount', 0):.4f} SOL{Style.RESET_ALL}")
        print(f"{Fore.GREEN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê{Style.RESET_ALL}")
        
    except Exception as e:
        print(f"{Fore.RED}Error processing early position entry: {str(e)}{Style.RESET_ALL}")

@sio.on('early_position_exited')
async def on_early_position_exited(data):
    """Handle early position exit events"""
    if not running:
        return
        
    log_message("EARLY_POSITION_EXITED", {
        **data,
        "client_id": sio.sid,
        "received_at": datetime.now().isoformat()
    })
    
    try:
        timestamp = datetime.fromtimestamp(data.get('timestamp', 0) / 1000)
        formatted_time = timestamp.strftime('%Y-%m-%d %H:%M:%S')
        
        print(f"\n{Fore.YELLOW}[{formatted_time}] üö™ EARLY POSITION EXITED:{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}Pool ID: {data.get('pool_id', 'N/A')}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}Position ID: {data.get('position_id', 'N/A')}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}Exit Reason: {data.get('exit_reason', 'N/A')}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}Entry Price: {data.get('entry_price', 0):.8f} SOL{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}Exit Price: {data.get('exit_price', 0):.8f} SOL{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}Profit/Loss: {data.get('profit_loss', 0):.8f} SOL{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}Hold Time: {data.get('hold_time_minutes', 0):.1f} minutes{Style.RESET_ALL}")
        
    except Exception as e:
        print(f"{Fore.RED}Error processing early position exit event: {e}{Style.RESET_ALL}")

@sio.on('arbitrage_opportunity')
async def on_arbitrage_opportunity(data):
    """Handle arbitrage opportunity events"""
    if not running:
        return
        
    log_message("ARBITRAGE_OPPORTUNITY", {
        **data,
        "client_id": sio.sid,
        "received_at": datetime.now().isoformat()
    })
    
    try:
        timestamp = datetime.fromtimestamp(data.get('timestamp', 0) / 1000)
        formatted_time = timestamp.strftime('%Y-%m-%d %H:%M:%S')
        
        opportunity_data = data.get('data', {})
        
        print(f"\n{Fore.CYAN}[{formatted_time}] üéØ ARBITRAGE OPPORTUNITY DETECTED:{Style.RESET_ALL}")
        print(f"{Fore.CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê{Style.RESET_ALL}")
        print(f"{Fore.CYAN}Pool ID: {data.get('pool_id', 'N/A')}{Style.RESET_ALL}")
        print(f"{Fore.CYAN}Confidence: {opportunity_data.get('confidence', 'N/A')}{Style.RESET_ALL}")
        print(f"{Fore.CYAN}Entry Price: {opportunity_data.get('entryPrice', 0):.8f} SOL{Style.RESET_ALL}")
        print(f"{Fore.CYAN}Current Price: {opportunity_data.get('currentPrice', 0):.8f} SOL{Style.RESET_ALL}")
        print(f"{Fore.CYAN}Price Change: {opportunity_data.get('priceChangePercent', 0):.2f}%{Style.RESET_ALL}")
        print(f"{Fore.CYAN}TVL Change: {opportunity_data.get('tvlChangePercent', 0):.2f}%{Style.RESET_ALL}")
        print(f"{Fore.CYAN}Take Profit: {opportunity_data.get('exitStrategy', {}).get('takeProfit', 0):.8f} SOL{Style.RESET_ALL}")
        print(f"{Fore.CYAN}Stop Loss: {opportunity_data.get('exitStrategy', {}).get('stopLoss', 0):.8f} SOL{Style.RESET_ALL}")
        print(f"{Fore.CYAN}Max Hold Time: {opportunity_data.get('exitStrategy', {}).get('maxHoldTime', 0) / 1000 / 60:.0f} minutes{Style.RESET_ALL}")
        
    except Exception as e:
        print(f"{Fore.RED}Error processing arbitrage opportunity event: {e}{Style.RESET_ALL}")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}Shutdown complete{Style.RESET_ALL}")
    except Exception as e:
        print(f"{Fore.RED}Fatal error: {e}{Style.RESET_ALL}")
        sys.exit(1) 